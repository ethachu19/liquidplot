/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.aeternum.liquidplot.main;

import com.aeternum.liquidplot.communication.ServerIO;
import com.aeternum.liquidplot.utils.OsCheck;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.File;
import java.io.IOException;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;

/**
 *
 * @author Ethan Mak
 */
public class GUI extends javax.swing.JFrame {
    
    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        python = new javax.swing.JCheckBox();
        bash = new javax.swing.JCheckBox();
        sftp = new javax.swing.JCheckBox();
        command = new javax.swing.JCheckBox();
        pythonText = new javax.swing.JTextField();
        bashText = new javax.swing.JTextField();
        sftpText = new javax.swing.JTextField();
        commandText = new javax.swing.JTextField();
        request = new javax.swing.JButton();
        python3 = new javax.swing.JToggleButton();
        pythonChoose = new javax.swing.JButton();
        bashChoose = new javax.swing.JButton();
        sftpChoose = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        console = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        python.setText("Python Script");
        python.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pythonActionPerformed(evt);
            }
        });

        bash.setText("Bash Script");

        sftp.setText("Send Over SFTP");

        command.setText("Run Command");

        request.setText("Send Requests Over");
        request.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestActionPerformed(evt);
            }
        });

        python3.setText("Python3");

        pythonChoose.setText("Choose File");
        pythonChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pythonChooseActionPerformed(evt);
            }
        });

        bashChoose.setText("Choose File");
        bashChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bashChooseActionPerformed(evt);
            }
        });

        sftpChoose.setText("Choose File");
        sftpChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sftpChooseActionPerformed(evt);
            }
        });

        console.setColumns(20);
        console.setRows(5);
        jScrollPane1.setViewportView(console);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(python)
                            .addComponent(bash)
                            .addComponent(sftp)
                            .addComponent(command))
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(request)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(pythonText, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pythonChoose)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(python3))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(sftpText, javax.swing.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE)
                                    .addComponent(bashText))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(bashChoose)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(sftpChoose))))
                            .addComponent(commandText))))
                .addContainerGap(38, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(python)
                    .addComponent(pythonText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(python3)
                    .addComponent(pythonChoose))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bash)
                    .addComponent(bashText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bashChoose))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sftp)
                    .addComponent(sftpText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sftpChoose))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(command)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(commandText)))
                .addGap(18, 18, 18)
                .addComponent(request)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pythonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pythonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pythonActionPerformed

    private void requestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestActionPerformed
        if (python.isSelected() && !pythonText.getText().equals("")) {
            if (python3.isSelected()) {
                ServerIO.runPython3(new File(pythonText.getText()));
            } else {
                ServerIO.runPython(new File(pythonText.getText()));
            }
        }
        if (bash.isSelected() && !bashText.getText().equals("")) {
            ServerIO.runScript(new File(bashText.getText()));
        }
        if (sftp.isSelected() && !sftpText.getText().equals("")) {
            ServerIO.sendFile(new File(sftpText.getText()), "~/Documents/labRobo/misc/");
        }
        if (command.isSelected() && !commandText.getText().equals("")) {
            ServerIO.runCommand(commandText.getText());
        }
    }//GEN-LAST:event_requestActionPerformed

    private void pythonChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pythonChooseActionPerformed
        JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getDefaultDirectory());
        jfc.setDialogTitle("Choose Python Script");
        jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        jfc.setFileFilter(new FileNameExtensionFilter("Python Scripts *.py", "py"));
        
        if (jfc.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
            if (jfc.getSelectedFile().isFile()) {
                pythonText.setText(jfc.getSelectedFile().getAbsolutePath());
            }
        }
    }//GEN-LAST:event_pythonChooseActionPerformed

    private void bashChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bashChooseActionPerformed
        JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getDefaultDirectory());
        jfc.setDialogTitle("Choose Bash Script");
        jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        jfc.setFileFilter(new FileNameExtensionFilter("Bash Scripts *.sh", "sh"));
        
        if (jfc.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
            if (jfc.getSelectedFile().isFile()) {
                bashText.setText(jfc.getSelectedFile().getAbsolutePath());
            }
        }
    }//GEN-LAST:event_bashChooseActionPerformed

    private void sftpChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sftpChooseActionPerformed
        JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getDefaultDirectory());
        jfc.setDialogTitle("Choose File");
        jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        
        if (jfc.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
            if (jfc.getSelectedFile().isFile()) {
                sftpText.setText(jfc.getSelectedFile().getAbsolutePath());
            }
        }
    }//GEN-LAST:event_sftpChooseActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        OsCheck.detectedOS = OsCheck.getOperatingSystemType();
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        JFrame currentWindow = new GUI();
        try {
            ServerIO.openClient();
            System.out.println("Opened Server");
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    currentWindow.setTitle("Remote Server Control");
                    currentWindow.setVisible(true);
                    currentWindow.addWindowListener(new WindowListener() {
                        @Override
                        public void windowOpened(WindowEvent e) {
//                            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                        }
                        
                        @Override
                        public void windowClosing(WindowEvent e) {
                            try {
                                ServerIO.closeClient();
                                System.out.println("Closed Server");
                            } catch (IOException ex) {
                                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        
                        @Override
                        public void windowClosed(WindowEvent e) {
//                            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                        }
                        
                        @Override
                        public void windowIconified(WindowEvent e) {
//                            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                        }
                        
                        @Override
                        public void windowDeiconified(WindowEvent e) {
//                            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                        }
                        
                        @Override
                        public void windowActivated(WindowEvent e) {
//                            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                        }
                        
                        @Override
                        public void windowDeactivated(WindowEvent e) {
//                            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                        }
                    });
                }
            });
        } catch (UnknownHostException ex) {
            JOptionPane.showMessageDialog(null, "Unable to find device: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
//        finally {
//            try {
//                ServerIO.closeClient();
//                System.out.println("Closed Server");
//            } catch (IOException ex) {
//                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox bash;
    private javax.swing.JButton bashChoose;
    private javax.swing.JTextField bashText;
    private javax.swing.JCheckBox command;
    private javax.swing.JTextField commandText;
    private javax.swing.JTextArea console;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBox python;
    private javax.swing.JToggleButton python3;
    private javax.swing.JButton pythonChoose;
    private javax.swing.JTextField pythonText;
    private javax.swing.JButton request;
    private javax.swing.JCheckBox sftp;
    private javax.swing.JButton sftpChoose;
    private javax.swing.JTextField sftpText;
    // End of variables declaration//GEN-END:variables
}
